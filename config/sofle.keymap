#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

/ {
    macros {
        next_buffer: next_buffer {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp RIGHT_BRACKET &kp B>;
            label = "NEXT_BUFFER";
            wait-ms = <5>;
        };

        prev_buffer: prev_buffer {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_BRACKET &kp B>;
            label = "PREV_BUFFER";
            wait-ms = <5>;
        };

        telescope_files: telescope_files {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp BACKSLASH &kp T &kp P>;
            label = "TELESCOPE_FILES";
            wait-ms = <5>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        layer_0 {
            bindings = <
&kp GRAVE  &kp N1  &kp N2        &kp N3    &kp N4     &kp N5                        &kp N6  &kp N7    &kp N8     &kp N9    &kp N0    &kp BSPC
&kp TAB    &kp Q   &kp W         &kp E     &kp R      &kp T                         &kp Y   &kp U     &kp I      &kp O     &kp P     &kp BSLH
&kp ESC    &kp A   &kp S         &kp D     &kp F      &kp G                         &kp H   &kp J     &kp K      &kp L     &kp SEMI  &kp SQT
&kp LSHFT  &kp Z   &kp X         &kp C     &kp V      &kp B   &trans       &trans   &kp N   &kp M     &kp COMMA  &kp DOT   &kp FSLH  &kp RSHFT
                   &kp LG(LGUI)  &kp LALT  &kp LCTRL  &to 1   &kp SPACE    &kp RET  &to 2   &kp LBKT  &kp RALT   &kp RBKT
            >;
        };

        layer_1 {
            bindings = <
&kp F1  &kp F2  &kp F3  &kp F4  &kp F5  &kp F6                    &kp F7     &kp F8    &kp F9        &kp F10    &kp F11    &kp F12
&trans  &trans  &trans  &trans  &trans  &trans                    &kp PG_UP  &kp END   &kp UP_ARROW  &kp HOME   &kp MINUS  &kp EQUAL
&trans  &trans  &trans  &trans  &trans  &trans                    &kp PG_DN  &kp LEFT  &kp DOWN      &kp RIGHT  &trans     &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans     &trans    &trans        &trans     &trans     &trans
                &trans  &trans  &trans  &trans  &trans    &trans  &trans     &trans    &trans        &trans
            >;
        };

        layer_2 {
            bindings = <
&trans  &bt BT_SEL 0    &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4                    &trans  &trans      &trans            &trans      &trans  &trans
&trans  &bt BT_CLR_ALL  &trans        &trans        &trans        &trans                          &trans  &trans      &trans            &trans      &trans  &trans
&trans  &out OUT_TOG    &trans        &trans        &trans        &trans                          &trans  &kp K_PREV  &kp K_PLAY_PAUSE  &kp K_NEXT  &trans  &trans
&trans  &trans          &trans        &trans        &trans        &trans        &trans    &trans  &trans  &trans      &trans            &trans      &trans  &trans
                        &trans        &trans        &trans        &trans        &trans    &trans  &trans  &trans      &trans            &trans
            >;
        };

        both {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans                    &trans        &trans  &trans  &trans        &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                    &trans        &trans  &trans  &trans        &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                    &prev_buffer  &trans  &trans  &next_buffer  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans        &trans  &trans  &trans        &trans  &trans
                &trans  &trans  &trans  &trans  &trans    &trans  &trans        &trans  &trans  &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        neovim_binds {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
};
